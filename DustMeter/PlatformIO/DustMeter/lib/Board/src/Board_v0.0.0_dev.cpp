/*
 */

#include <AbstractHardware/MCU/ATMega328p/MCU_ATMega328p.h>
#include <Board_v0.0.0_dev.h>
#include <HardwareImpl/SSD1306/SSD1306.h>

MCU_ATMega328p atmega328p;

SSD1306 ssd1306 = SSD1306(128, 32, atmega328p.mcu_ATMega328pI2c, 0x3c);

class _500msTimerEvent : public TimerEventHandler {
   public:
    volatile unsigned long micro = 0;
    volatile unsigned char checkValue = 0;  // 00~99초까지 저장
    volatile unsigned long seconds = 0;

    // 1s/(16Mhz / 1024) = 64us // timer0 1증가값
    // 64 * 256 = 16384 us // overflow 사간
    virtual void overFlowEvent() override {
        micro += 16384;
        unsigned char currentSeconds = (micro / 1000000) % 100;
        if (checkValue != currentSeconds) {
            unsigned char temp = currentSeconds;
            if (checkValue > temp) {
                temp += 100;
            }
            temp -= checkValue;
            seconds += temp;
            checkValue = currentSeconds;
        }
    }

    unsigned long getMicro() { return micro; }
    unsigned long getSeconds() { return seconds; }
};
_500msTimerEvent timerEventHandler;

void BoardSetting::init() {
    atmega328p.setGlobalInterrupt(true);

    // usart설정
    atmega328p.mcu_ATMega328pUsart.set((unsigned long)250000, UsartModule::DataBit::_8, UsartModule::Parity::Disable,
                                       UsartModule::StopBit::_1);
    atmega328p.mcu_ATMega328pUsart.on();

    // 타이머 설정
    atmega328p.mcu_ATMega328pTimer.timer0.set(MCU_ATMega328pTimer0::WaveformGenerationMode::Normal,
                                              MCU_ATMega328pTimer0::ClockSorce::CLK_PRESCALER_1024);
    atmega328p.mcu_ATMega328pTimer.timer0.setEventHandler(&timerEventHandler);
    atmega328p.mcu_ATMega328pTimer.timer0.on();

    // i2c 설정
    atmega328p.mcu_ATMega328pI2c.setPullup(true);
    atmega328p.mcu_ATMega328pI2c.setClock(400000);
    atmega328p.mcu_ATMega328pI2c.on();

    // oled설정
    ssd1306.init();
    ssd1306.on();
}

unsigned long BoardSetting::getHwMicroSecTime() { return timerEventHandler.getMicro(); }

UsartModule& BoardSetting::getUsartModule() { return atmega328p.mcu_ATMega328pUsart; }

GPIOModule::GPIOPin& BoardSetting::getVout1Pin() {
    return atmega328p.mcu_ATMega328pGpio.getGPIOPin(MCU_ATMega328p_Data::PhysicalPin::PD2);
}
GPIOModule::GPIOPin& BoardSetting::getVout2Pin() {
    return atmega328p.mcu_ATMega328pGpio.getGPIOPin(MCU_ATMega328p_Data::PhysicalPin::PD4);
}
GPIOModule::GPIOPin& BoardSetting::getFanConstrolPin() {
    return atmega328p.mcu_ATMega328pGpio.getGPIOPin(MCU_ATMega328p_Data::PhysicalPin::PD7);
}

#include <AbstractHardware/Display/Font/MonoFont5_7.h>
#include <CompilerAbst/VariableLocation.h>

const char stateStrHeating[] PROGMEM = "HEATING";
const char stateStrVenting[] PROGMEM = "VENTING";
const char stateStrRunning[] PROGMEM = "RUNNING";
DustMeterData::State DustMeterData::State::HEATING(0x00, stateStrHeating, 7);
DustMeterData::State DustMeterData::State::VENTING(0x01, stateStrVenting, 7);
DustMeterData::State DustMeterData::State::RUNNING(0x02, stateStrRunning, 7);

volatile unsigned char uiData[] EEMEM = {
    0x26, 0x49, 0x49, 0x49, 0x30, 0x3,  0x1,  0x7F, 0x1,  0x3,  0x7C, 0x12, 0x11, 0x12, 0x7C, 0x3,  0x1,  0x7F, 0x1,
    0x3,  0x7F, 0x49, 0x49, 0x49, 0x41, 0x0,  0x0,  0x14, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0xFF, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x60, 0x60, 0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x20, 0x10, 0x8,  0x4,  0x2,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x60, 0x60, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x90, 0xA8, 0xA8, 0xA8, 0x48, 0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7F, 0x40, 0x40, 0x40,
    0x40, 0x38, 0x44, 0x44, 0x44, 0x38, 0x3C, 0x40, 0x30, 0x40, 0x3C, 0x7F, 0x9,  0x19, 0x29, 0x46, 0x20, 0x54, 0x54,
    0x78, 0x40, 0x4,  0x4,  0x3F, 0x44, 0x24, 0x0,  0x44, 0x7D, 0x40, 0x0,  0x38, 0x44, 0x44, 0x44, 0x38, 0x0,  0xFF,
    0x0,  0x38, 0x44, 0x44, 0x44, 0x28, 0x38, 0x44, 0x44, 0x44, 0x38, 0x7C, 0x8,  0x4,  0x4,  0x78, 0x38, 0x44, 0x44,
    0x44, 0x28, 0x38, 0x54, 0x54, 0x54, 0x18, 0x7C, 0x8,  0x4,  0x4,  0x78, 0x4,  0x4,  0x3F, 0x44, 0x24, 0x7C, 0x8,
    0x4,  0x4,  0x8,  0x20, 0x54, 0x54, 0x78, 0x40, 0x4,  0x4,  0x3F, 0x44, 0x24, 0x0,  0x44, 0x7D, 0x40, 0x0,  0x38,
    0x44, 0x44, 0x44, 0x38, 0x7C, 0x8,  0x4,  0x4,  0x78, 0x7F, 0x9,  0x9,  0x9,  0x6,  0x7F, 0x2,  0xC,  0x2,  0x7F,
    0x72, 0x49, 0x49, 0x49, 0x46, 0x0,  0x0,  0x60, 0x60, 0x0,  0x27, 0x45, 0x45, 0x45, 0x39, 0x0,  0x0,  0x14, 0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x60, 0x60, 0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x23, 0x13, 0x8,  0x64, 0x62, 0x0,  0xFF, 0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x60, 0x60, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3C, 0x40,
    0x40, 0x20, 0x7C, 0x7C, 0x4,  0x78, 0x4,  0x78, 0x20, 0x10, 0x8,  0x4,  0x2,  0x7C, 0x4,  0x78, 0x4,  0x78, 0x21,
    0x41, 0x49, 0x4D, 0x33, 0x7F, 0x9,  0x9,  0x9,  0x6,  0x7F, 0x2,  0xC,  0x2,  0x7F, 0x0,  0x42, 0x7F, 0x40, 0x0,
    0x0,  0x0,  0x60, 0x60, 0x0,  0x3E, 0x51, 0x49, 0x45, 0x3E, 0x0,  0x0,  0x14, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x60, 0x60, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x23, 0x13, 0x8,  0x64, 0x62, 0x0,  0xFF, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x60,
    0x60, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3C, 0x40, 0x40, 0x20, 0x7C, 0x7C, 0x4,
    0x78, 0x4,  0x78, 0x20, 0x10, 0x8,  0x4,  0x2,  0x7C, 0x4,  0x78, 0x4,  0x78, 0x21, 0x41, 0x49, 0x4D, 0x33
    // // 128*64버전 변수크기로 접근하기때문에 다 있어야함

    // , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    // , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    // , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    // , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    // , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    // , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    // , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    // , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    // , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    // , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    // , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    // , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    // , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    // , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    // , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    // , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    // , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    // , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    // , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    // , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    // , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    // , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

MonoFont5_7 monoFont;
void BoardSetting::drawUi() {
    unsigned char data[8];
    for (unsigned int i = 0; i < sizeof(uiData); i = i + 8) {
        VariableLocation::eepromRead((unsigned char*)(uiData + i), data, 8);
        ssd1306.draw(i % 128, (i / 128) * 8, data, 8, false);
    }
}

void printDustMetaTimeInfo(unsigned short time_100ms, unsigned int x, unsigned int y) {
    if (time_100ms > 999) time_100ms = 999;
    ssd1306.printDecimalWithFractional(x, y, monoFont, time_100ms, 2, 1);
}

void printDustMetaLowRatioInfo(unsigned short lowRatio_0_00per, unsigned int x, unsigned int y) {
    if (lowRatio_0_00per > 9999) lowRatio_0_00per = 9999;
    ssd1306.printDecimalWithFractional(x, y, monoFont, lowRatio_0_00per, 2, 2);
}

void printDustMetaConcentrationInfo(unsigned long concentration_0_00per, unsigned int x, unsigned int y) {
    if (concentration_0_00per > 999999L) concentration_0_00per = 999999;
    ssd1306.printDecimalWithFractional(x, y, monoFont, concentration_0_00per, 4, 2);
}

bool printFirstData = false;
DustMeterData preDustMeterData;

void BoardSetting::dataUpdate(DustMeterData& dustMeterData) {
    if (preDustMeterData.state != dustMeterData.state || printFirstData == false) {
        unsigned char stateStr[dustMeterData.state->strSize];
        VariableLocation::flashRead((unsigned char*)dustMeterData.state->str, stateStr, dustMeterData.state->strSize);
        ssd1306.write(30, 0, monoFont, (const char*)stateStr, dustMeterData.state->strSize);
        preDustMeterData.state = dustMeterData.state;
    }

    if (preDustMeterData.currentTimeCount_100ms != dustMeterData.currentTimeCount_100ms || printFirstData == false) {
        printDustMetaTimeInfo(dustMeterData.currentTimeCount_100ms, 78, 0);
        preDustMeterData.currentTimeCount_100ms = dustMeterData.currentTimeCount_100ms;
    }
    if (preDustMeterData.targetTimeCount_100ms != dustMeterData.targetTimeCount_100ms || printFirstData == false) {
        printDustMetaTimeInfo(dustMeterData.targetTimeCount_100ms, 103, 0);
        preDustMeterData.targetTimeCount_100ms = dustMeterData.targetTimeCount_100ms;
    }

    if (preDustMeterData.pm2_5LowRatio_0_00Per != dustMeterData.pm2_5LowRatio_0_00Per || printFirstData == false) {
        printDustMetaLowRatioInfo(dustMeterData.pm2_5LowRatio_0_00Per, 30, 16);
        preDustMeterData.pm2_5LowRatio_0_00Per = dustMeterData.pm2_5LowRatio_0_00Per;
    }
    if (preDustMeterData.pm0_1LowRatio_0_00Per != dustMeterData.pm0_1LowRatio_0_00Per || printFirstData == false) {
        printDustMetaLowRatioInfo(dustMeterData.pm0_1LowRatio_0_00Per, 30, 24);
        preDustMeterData.pm0_1LowRatio_0_00Per = dustMeterData.pm0_1LowRatio_0_00Per;
    }

    if (preDustMeterData.pm2_5Concentration_0_00umM3 != dustMeterData.pm2_5Concentration_0_00umM3 ||
        printFirstData == false) {
        printDustMetaConcentrationInfo(dustMeterData.pm2_5Concentration_0_00umM3, 68, 16);
        preDustMeterData.pm2_5Concentration_0_00umM3 = dustMeterData.pm2_5Concentration_0_00umM3;
    }
    if (preDustMeterData.pm0_1Concentration_0_00umM3 != dustMeterData.pm0_1Concentration_0_00umM3 ||
        printFirstData == false) {
        printDustMetaConcentrationInfo(dustMeterData.pm0_1Concentration_0_00umM3, 68, 24);
        preDustMeterData.pm0_1Concentration_0_00umM3 = dustMeterData.pm0_1Concentration_0_00umM3;
    }

    printFirstData = true;
}
